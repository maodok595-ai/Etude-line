"""
Migration pour ajouter CASCADE sur toutes les Foreign Keys pointant vers Universite
Ex√©cutez ce script pour mettre √† jour la base de donn√©es Render avec les contraintes CASCADE
"""

import os
from sqlalchemy import create_engine, text

# Utiliser EXTERNAL_DATABASE_URL pour Render
DATABASE_URL = os.getenv("EXTERNAL_DATABASE_URL") or os.getenv("DATABASE_URL")

if not DATABASE_URL:
    print("‚ùå Erreur: DATABASE_URL non trouv√©")
    exit(1)

print(f"üîó Connexion √† la base de donn√©es...")
engine = create_engine(DATABASE_URL)

# Liste des tables √† migrer
tables_to_migrate = [
    ("ufrs", "ufrs_universite_id_fkey"),
    ("administrateurs", "administrateurs_universite_id_fkey"),
    ("professeurs", "professeurs_universite_id_fkey"),
    ("etudiants", "etudiants_universite_id_fkey"),
    ("chapitres_complets", "chapitres_complets_universite_id_fkey"),
]

print("\n" + "="*70)
print("üîÑ MIGRATION CASCADE POUR SUPPRESSION D'UNIVERSIT√â")
print("="*70)
print("\n‚ö†Ô∏è  ATTENTION: Cette migration va modifier les contraintes de cl√©s √©trang√®res")
print("   pour permettre la suppression en cascade des universit√©s.\n")

with engine.connect() as conn:
    trans = None
    try:
        # Commencer une transaction
        trans = conn.begin()
        
        for i, (table_name, constraint_name) in enumerate(tables_to_migrate, 1):
            print(f"[{i}/{len(tables_to_migrate)}] Migration de la table '{table_name}'...")
            
            # DROP la contrainte existante
            drop_query = f"ALTER TABLE {table_name} DROP CONSTRAINT IF EXISTS {constraint_name}"
            conn.execute(text(drop_query))
            print(f"    ‚úì Ancienne contrainte supprim√©e")
            
            # ADD la nouvelle contrainte avec CASCADE
            add_query = f"""
            ALTER TABLE {table_name} 
            ADD CONSTRAINT {constraint_name} 
            FOREIGN KEY (universite_id) 
            REFERENCES universites(id) 
            ON DELETE CASCADE
            """
            conn.execute(text(add_query))
            print(f"    ‚úÖ Contrainte CASCADE ajout√©e sur {table_name}.universite_id")
        
        # Valider la transaction
        trans.commit()
        
        print("\n" + "="*70)
        print("‚úÖ MIGRATION TERMIN√âE AVEC SUCC√àS")
        print("="*70)
        print("\nüìù R√©sum√© des modifications:")
        print("   - ufrs.universite_id ‚Üí ON DELETE CASCADE")
        print("   - administrateurs.universite_id ‚Üí ON DELETE CASCADE")
        print("   - professeurs.universite_id ‚Üí ON DELETE CASCADE")
        print("   - etudiants.universite_id ‚Üí ON DELETE CASCADE")
        print("   - chapitres_complets.universite_id ‚Üí ON DELETE CASCADE")
        print("\n‚ú® La suppression d'une universit√© supprimera automatiquement:")
        print("   ‚Ä¢ Tous les UFRs de cette universit√©")
        print("   ‚Ä¢ Toutes les fili√®res (via UFR)")
        print("   ‚Ä¢ Toutes les mati√®res (via fili√®res)")
        print("   ‚Ä¢ Tous les chapitres de cette universit√©")
        print("   ‚Ä¢ Tous les √©tudiants de cette universit√©")
        print("   ‚Ä¢ Tous les professeurs de cette universit√©")
        print("   ‚Ä¢ Tous les administrateurs de cette universit√©")
        print("   ‚Ä¢ Tous les param√®tres de cette universit√©")
        print("\n")
        
    except Exception as e:
        if trans:
            trans.rollback()
        print(f"\n‚ùå Erreur lors de la migration: {e}")
        print("   Transaction annul√©e - aucune modification n'a √©t√© appliqu√©e")
        raise
    finally:
        conn.close()

print("üîí Connexion ferm√©e")
